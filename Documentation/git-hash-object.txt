git-hash-object(1)
==================

NAME
----
git-hash-object - Compute object ID and optionally creates a blob from a file


SYNOPSIS
--------
[verse]
'git hash-object' [-t <type>] [-w] [--path=<file>|--no-filters] [--stdin [--literally]] [--] <file>...
'git hash-object' [-t <type>] [-w] --stdin-paths [--no-filters]

DESCRIPTION
-----------
Computes the object ID value for an object with specified type
with the contents of the named file (which can be outside of the
work tree), and optionally writes the resulting object into the
object database.  Reports its object ID to its standard output.
When <type> is not specified, it defaults to "blob".

This command won't take the shortcut of seeing if the path(s) to be
hashed are present in the index, in which case their already computed
object ID could be retrieved by linkgit:git-ls-files[1] via the
`--stage` option, or by linkgit:git-rev-parse[1]. Use those instead of
e.g. `--stdin-paths` if the intent is to say find the blob object IDs
of checked-out files.

OPTIONS
-------

-t <type>::
	Specify the type (default: "blob").

-w::
	Actually write the object into the object database.
+
No guarantees are made as to how the object is added to the database
(e.g. whether as a loose object, or streamed to a pack), except in the
case of the `--literally` option. How it's written may depend on
heuristics such as the `core.bigFileThreshold` configuration variable
(see linkgit:git-config[1]).

--stdin::
	Read the object from standard input instead of from a file.

--stdin-paths::
	Read file names from the standard input, one per line, instead
	of from the command-line.

--path::
	Hash object as it were located at the given path. The location of
	file does not directly influence on the hash value, but path is
	used to determine what Git filters should be applied to the object
	before it can be placed to the object database, and, as result of
	applying filters, the actual blob put into the object database may
	differ from the given file. This option is mainly useful for hashing
	temporary files located outside of the working directory or files
	read from stdin.

--no-filters::
	Hash the contents as is, ignoring any input filter that would
	have been chosen by the attributes mechanism, including the end-of-line
	conversion. If the file is read from standard input then this
	is always implied, unless the `--path` option is given.

--literally::
	Allow for hashing arbitrary data which might not
	otherwise pass standard object parsing or git-fsck checks. Useful for
	stress-testing Git itself or reproducing characteristics of corrupt or
	bogus objects encountered in the wild. When writing objects guarantees
	that the written object will be a loose object, for ease of debugging.

GIT
---
Part of the linkgit:git[1] suite
